CodeWars
8 kyu
-------------------------------------------------------
Count Odd Numbers below n

select n, n / 2 as res
from oddcount
-------------------------------------------------------
Get Nth Even Number

select n, (-2 + n*2) as res
from ntheven
-------------------------------------------------------
Function 2 - squaring an argument

select n, (n*n) as res
from square
-------------------------------------------------------
Will you make it?

select distance_to_pump, mpg, fuel_left, case when mpg*fuel_left>=distance_to_pump  then true else false end as res
from zerofuel
-------------------------------------------------------
SQL Basics: Mod

select mod(number1,number2) as mod
from decimals
-------------------------------------------------------
Third Angle of a Triangle

select a, b, 180- (a+b) as res
from otherangle
-------------------------------------------------------
Easy SQL: Square Root and Log

select sqrt(number1) as root, LOG (number2) as log
from decimals
-------------------------------------------------------
Easy SQL: Rounding Decimals

select floor(number1) as number1, ceil(number2) as number2
from decimals
-------------------------------------------------------
Collect Tuition (SQL for Beginners #4)

select name, age, semester, mentor, tuition_received
from students
where tuition_received = false
-------------------------------------------------------
Register for the Party (SQL for Beginners #3)

insert into participants(name, age, attending)
values('Andrey', 25, true);
select *
from participants
-------------------------------------------------------
On the Canadian Border (SQL for Beginners #2)

select name, country
from travelers
where country != 'Canada' and country != 'Mexico' and country != 'USA'
-------------------------------------------------------
SQL Basics: Simple MIN / MAX

select min(age) as age_min, max(age) as age_max
from people
-------------------------------------------------------
SQL Basics: Simple WHERE and ORDER BY

select *
from people
where age>50
order by age desc
-------------------------------------------------------
SQL Basics: Simple SUM

select sum(age) as age_sum
from people
-------------------------------------------------------




-------------------------------------------------------
7 kyu
-------------------------------------------------------
Genre Analysis with PostgreSQL Arrays

select distinct(unnest(genres)) as genre, count(title) as count, array_agg(title order by title) as books
from books
group by genre
order by count desc, genre
-------------------------------------------------------
Hosts Missing Specific Software Title and Having Recent Installations

select host from host_software 
group by host
having every(software_title != 'Title2') and max(install_date) >= current_date - interval '1 year'
order by host
-------------------------------------------------------
Cats and shelves

select a, b, (b - a) % 3 + (b - a) / 3 as res
from jumps
-------------------------------------------------------
Vowel Count

select str, length(regexp_replace(str, '[^aeiou]', '', 'g')) as res
from getcount
-------------------------------------------------------

ASCII Patterns Using SQL: part 2

prepare alternate_star_and_number(int) as
SELECT
    CASE 
    WHEN i%2=0 THEN (i/2)::TEXT ELSE REPEAT('*',i/2+1) 
    END AS pattern
FROM GENERATE_SERIES(1,$1) AS t(i);
-------------------------------------------------------
ASCII Patterns Using SQL: part 1

prepare draw_pattern(int) as
select repeat('*', GENERATE_SERIES($1,1, -1)) as star_pattern
-------------------------------------------------------
Disemvowel Trolls

select str, translate(str, 'aeiouAEIOU', '') as res
from disemvowel
-------------------------------------------------------
Top-Scoring Students for Each Subject


-------------------------------------------------------
Top-Scoring Students Across All Subjects

select s.student_id, s.student_name
from students as s
join marks as m using (student_id)
group by s.student_id, s.student_name
having every(m.mark_rate = (select max(mark_rate) from marks where subject_id = m.subject_id))
order by s.student_id desc
-------------------------------------------------------
Triangular Treasure

select n, case when n > 0 then ((n*(n+1))/2) else 0 end as res
from triangular
-------------------------------------------------------
Sales Analysis for the Previous Week

select *
from sales as s
join products as p using(product_id)
join categories as c using(category_id)








